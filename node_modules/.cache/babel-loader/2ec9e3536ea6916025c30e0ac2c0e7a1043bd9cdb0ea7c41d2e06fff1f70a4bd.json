{"ast":null,"code":"var _jsxFileName = \"/Users/linjiawei/Desktop/Folders/game/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { getRandomPuzzleSet, shuffleArray } from './gameData';\nimport GameBoard from './components/GameBoard';\nimport GameHeader from './components/GameHeader';\nimport GameResults from './components/GameResults';\nimport HelpModal from './components/HelpModal';\nimport CompletionScreen from './components/CompletionScreen';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Game state management\n  const [currentPuzzle, setCurrentPuzzle] = useState(null);\n  const [gameWords, setGameWords] = useState([]);\n  const [selectedWords, setSelectedWords] = useState([]);\n  const [solvedCategories, setSolvedCategories] = useState([]);\n  const [mistakes, setMistakes] = useState(0);\n  const [gameStatus, setGameStatus] = useState('playing'); // 'playing', 'won', 'lost'\n  const [showHelp, setShowHelp] = useState(false);\n  const [feedback, setFeedback] = useState({\n    message: '',\n    type: ''\n  });\n  const [isAnimating, setIsAnimating] = useState(false);\n  const MAX_MISTAKES = 4;\n\n  // Initialize game on component mount\n  useEffect(() => {\n    initializeGame();\n  }, []);\n\n  // Initialize a new game\n  const initializeGame = () => {\n    const puzzle = getRandomPuzzleSet();\n    setCurrentPuzzle(puzzle);\n\n    // Flatten all words from categories and shuffle them\n    const allWords = puzzle.categories.flatMap(category => category.words.map(word => ({\n      text: word,\n      category: category.name,\n      difficulty: category.difficulty,\n      id: Math.random().toString(36).substr(2, 9)\n    })));\n    setGameWords(shuffleArray(allWords));\n    setSelectedWords([]);\n    setSolvedCategories([]);\n    setMistakes(0);\n    setGameStatus('playing');\n    setFeedback({\n      message: '',\n      type: ''\n    });\n    setIsAnimating(false);\n  };\n\n  // Handle word selection\n  const handleWordClick = wordId => {\n    if (isAnimating || gameStatus !== 'playing') return;\n    const word = gameWords.find(w => w.id === wordId);\n    if (!word) return;\n    if (selectedWords.includes(wordId)) {\n      // Deselect word\n      setSelectedWords(selectedWords.filter(id => id !== wordId));\n    } else if (selectedWords.length < 4) {\n      // Select word\n      setSelectedWords([...selectedWords, wordId]);\n    }\n  };\n\n  // Check if selected words form a valid group\n  const checkSelection = () => {\n    if (selectedWords.length !== 4 || isAnimating) return;\n    setIsAnimating(true);\n    const selectedWordObjects = selectedWords.map(id => gameWords.find(w => w.id === id));\n\n    // Check if all selected words belong to the same category\n    const categories = [...new Set(selectedWordObjects.map(w => w.category))];\n    if (categories.length === 1) {\n      // Correct group found!\n      const categoryName = categories[0];\n      const categoryData = currentPuzzle.categories.find(cat => cat.name === categoryName);\n      setSolvedCategories([...solvedCategories, {\n        ...categoryData,\n        words: selectedWordObjects.map(w => w.text)\n      }]);\n\n      // Remove solved words from game board\n      setGameWords(gameWords.filter(w => !selectedWords.includes(w.id)));\n      setSelectedWords([]);\n      setFeedback({\n        message: `Correct! ${categoryName}`,\n        type: 'success'\n      });\n\n      // Check if game is won\n      if (solvedCategories.length === 3) {\n        // Will be 4 after this addition\n        setTimeout(() => setGameStatus('won'), 1000);\n      }\n    } else {\n      // Incorrect group\n      const newMistakes = mistakes + 1;\n      setMistakes(newMistakes);\n      setSelectedWords([]);\n      setFeedback({\n        message: `Not quite right. ${MAX_MISTAKES - newMistakes} mistakes remaining.`,\n        type: 'error'\n      });\n\n      // Check if game is lost\n      if (newMistakes >= MAX_MISTAKES) {\n        setTimeout(() => setGameStatus('lost'), 1000);\n      }\n    }\n\n    // Clear feedback after 3 seconds\n    setTimeout(() => {\n      setFeedback({\n        message: '',\n        type: ''\n      });\n      setIsAnimating(false);\n    }, 3000);\n  };\n\n  // Submit selection when 4 words are selected\n  useEffect(() => {\n    if (selectedWords.length === 4) {\n      setTimeout(checkSelection, 500); // Small delay for better UX\n    }\n  }, [selectedWords]);\n\n  // Shuffle remaining words\n  const shuffleWords = () => {\n    if (isAnimating) return;\n    setGameWords(shuffleArray(gameWords));\n    setSelectedWords([]);\n  };\n\n  // Deselect all words\n  const deselectAll = () => {\n    if (isAnimating) return;\n    setSelectedWords([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(GameHeader, {\n      mistakes: mistakes,\n      maxMistakes: MAX_MISTAKES,\n      onHelp: () => setShowHelp(true),\n      onRestart: initializeGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), gameStatus === 'playing' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(GameResults, {\n        solvedCategories: solvedCategories\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n        words: gameWords,\n        selectedWords: selectedWords,\n        onWordClick: handleWordClick,\n        isAnimating: isAnimating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-btn shuffle-btn\",\n          onClick: shuffleWords,\n          disabled: isAnimating,\n          children: \"Shuffle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-btn deselect-btn\",\n          onClick: deselectAll,\n          disabled: selectedWords.length === 0 || isAnimating,\n          children: \"Deselect All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), feedback.message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `feedback ${feedback.type}`,\n        children: feedback.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), (gameStatus === 'won' || gameStatus === 'lost') && /*#__PURE__*/_jsxDEV(CompletionScreen, {\n      gameStatus: gameStatus,\n      solvedCategories: solvedCategories,\n      totalCategories: 4,\n      mistakes: mistakes,\n      maxMistakes: MAX_MISTAKES,\n      puzzleName: currentPuzzle === null || currentPuzzle === void 0 ? void 0 : currentPuzzle.name,\n      onRestart: initializeGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this), showHelp && /*#__PURE__*/_jsxDEV(HelpModal, {\n      onClose: () => setShowHelp(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qyTHYEjyd2Pcj2kCuQEWWWFAmIc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","getRandomPuzzleSet","shuffleArray","GameBoard","GameHeader","GameResults","HelpModal","CompletionScreen","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentPuzzle","setCurrentPuzzle","gameWords","setGameWords","selectedWords","setSelectedWords","solvedCategories","setSolvedCategories","mistakes","setMistakes","gameStatus","setGameStatus","showHelp","setShowHelp","feedback","setFeedback","message","type","isAnimating","setIsAnimating","MAX_MISTAKES","initializeGame","puzzle","allWords","categories","flatMap","category","words","map","word","text","name","difficulty","id","Math","random","toString","substr","handleWordClick","wordId","find","w","includes","filter","length","checkSelection","selectedWordObjects","Set","categoryName","categoryData","cat","setTimeout","newMistakes","shuffleWords","deselectAll","className","children","maxMistakes","onHelp","onRestart","fileName","_jsxFileName","lineNumber","columnNumber","onWordClick","onClick","disabled","totalCategories","puzzleName","onClose","_c","$RefreshReg$"],"sources":["/Users/linjiawei/Desktop/Folders/game/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { getRandomPuzzleSet, shuffleArray } from './gameData';\nimport GameBoard from './components/GameBoard';\nimport GameHeader from './components/GameHeader';\nimport GameResults from './components/GameResults';\nimport HelpModal from './components/HelpModal';\nimport CompletionScreen from './components/CompletionScreen';\n\nfunction App() {\n  // Game state management\n  const [currentPuzzle, setCurrentPuzzle] = useState(null);\n  const [gameWords, setGameWords] = useState([]);\n  const [selectedWords, setSelectedWords] = useState([]);\n  const [solvedCategories, setSolvedCategories] = useState([]);\n  const [mistakes, setMistakes] = useState(0);\n  const [gameStatus, setGameStatus] = useState('playing'); // 'playing', 'won', 'lost'\n  const [showHelp, setShowHelp] = useState(false);\n  const [feedback, setFeedback] = useState({ message: '', type: '' });\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  const MAX_MISTAKES = 4;\n\n  // Initialize game on component mount\n  useEffect(() => {\n    initializeGame();\n  }, []);\n\n  // Initialize a new game\n  const initializeGame = () => {\n    const puzzle = getRandomPuzzleSet();\n    setCurrentPuzzle(puzzle);\n    \n    // Flatten all words from categories and shuffle them\n    const allWords = puzzle.categories.flatMap(category => \n      category.words.map(word => ({\n        text: word,\n        category: category.name,\n        difficulty: category.difficulty,\n        id: Math.random().toString(36).substr(2, 9)\n      }))\n    );\n    \n    setGameWords(shuffleArray(allWords));\n    setSelectedWords([]);\n    setSolvedCategories([]);\n    setMistakes(0);\n    setGameStatus('playing');\n    setFeedback({ message: '', type: '' });\n    setIsAnimating(false);\n  };\n\n  // Handle word selection\n  const handleWordClick = (wordId) => {\n    if (isAnimating || gameStatus !== 'playing') return;\n\n    const word = gameWords.find(w => w.id === wordId);\n    if (!word) return;\n\n    if (selectedWords.includes(wordId)) {\n      // Deselect word\n      setSelectedWords(selectedWords.filter(id => id !== wordId));\n    } else if (selectedWords.length < 4) {\n      // Select word\n      setSelectedWords([...selectedWords, wordId]);\n    }\n  };\n\n  // Check if selected words form a valid group\n  const checkSelection = () => {\n    if (selectedWords.length !== 4 || isAnimating) return;\n\n    setIsAnimating(true);\n    const selectedWordObjects = selectedWords.map(id => \n      gameWords.find(w => w.id === id)\n    );\n\n    // Check if all selected words belong to the same category\n    const categories = [...new Set(selectedWordObjects.map(w => w.category))];\n    \n    if (categories.length === 1) {\n      // Correct group found!\n      const categoryName = categories[0];\n      const categoryData = currentPuzzle.categories.find(cat => cat.name === categoryName);\n      \n      setSolvedCategories([...solvedCategories, {\n        ...categoryData,\n        words: selectedWordObjects.map(w => w.text)\n      }]);\n      \n      // Remove solved words from game board\n      setGameWords(gameWords.filter(w => !selectedWords.includes(w.id)));\n      setSelectedWords([]);\n      \n      setFeedback({ \n        message: `Correct! ${categoryName}`, \n        type: 'success' \n      });\n\n      // Check if game is won\n      if (solvedCategories.length === 3) { // Will be 4 after this addition\n        setTimeout(() => setGameStatus('won'), 1000);\n      }\n    } else {\n      // Incorrect group\n      const newMistakes = mistakes + 1;\n      setMistakes(newMistakes);\n      setSelectedWords([]);\n      \n      setFeedback({ \n        message: `Not quite right. ${MAX_MISTAKES - newMistakes} mistakes remaining.`, \n        type: 'error' \n      });\n\n      // Check if game is lost\n      if (newMistakes >= MAX_MISTAKES) {\n        setTimeout(() => setGameStatus('lost'), 1000);\n      }\n    }\n\n    // Clear feedback after 3 seconds\n    setTimeout(() => {\n      setFeedback({ message: '', type: '' });\n      setIsAnimating(false);\n    }, 3000);\n  };\n\n  // Submit selection when 4 words are selected\n  useEffect(() => {\n    if (selectedWords.length === 4) {\n      setTimeout(checkSelection, 500); // Small delay for better UX\n    }\n  }, [selectedWords]);\n\n  // Shuffle remaining words\n  const shuffleWords = () => {\n    if (isAnimating) return;\n    setGameWords(shuffleArray(gameWords));\n    setSelectedWords([]);\n  };\n\n  // Deselect all words\n  const deselectAll = () => {\n    if (isAnimating) return;\n    setSelectedWords([]);\n  };\n\n  return (\n    <div className=\"App\">\n      <GameHeader \n        mistakes={mistakes}\n        maxMistakes={MAX_MISTAKES}\n        onHelp={() => setShowHelp(true)}\n        onRestart={initializeGame}\n      />\n\n      {gameStatus === 'playing' && (\n        <>\n          <GameResults solvedCategories={solvedCategories} />\n          \n          <GameBoard\n            words={gameWords}\n            selectedWords={selectedWords}\n            onWordClick={handleWordClick}\n            isAnimating={isAnimating}\n          />\n\n          <div className=\"game-controls\">\n            <button \n              className=\"control-btn shuffle-btn\"\n              onClick={shuffleWords}\n              disabled={isAnimating}\n            >\n              Shuffle\n            </button>\n            <button \n              className=\"control-btn deselect-btn\"\n              onClick={deselectAll}\n              disabled={selectedWords.length === 0 || isAnimating}\n            >\n              Deselect All\n            </button>\n          </div>\n\n          {feedback.message && (\n            <div className={`feedback ${feedback.type}`}>\n              {feedback.message}\n            </div>\n          )}\n        </>\n      )}\n\n      {(gameStatus === 'won' || gameStatus === 'lost') && (\n        <CompletionScreen\n          gameStatus={gameStatus}\n          solvedCategories={solvedCategories}\n          totalCategories={4}\n          mistakes={mistakes}\n          maxMistakes={MAX_MISTAKES}\n          puzzleName={currentPuzzle?.name}\n          onRestart={initializeGame}\n        />\n      )}\n\n      {showHelp && (\n        <HelpModal onClose={() => setShowHelp(false)} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}